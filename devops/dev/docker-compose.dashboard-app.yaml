networks:
  dashboard_app_network:
    driver: bridge

services:
  db:
    image: postgres:16
    container_name: postgres_dev
    env_file:
      - ../../apps/data_handler/.env.dev
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "postgres"
      DB_HOST: "db"
      DB_PORT: "5432"

  streamlit:
    build:
      context: ../../apps
      dockerfile: dashboard_app/Dockerfile
    ports:
      - "8501:8501"
    env_file:
      - ../../apps/dashboard_app/.env.dev
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dashboard_app_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # streamlit:
  #   build:
  #     context: ../../apps
  #     dockerfile: dashboard_app/Dockerfile
  #   ports:
  #     - "8501:8501"
  #   env_file:
  #     - ../../apps/dashboard_app/.env
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - ../../apps/dashboard_app:/app/dashboard_app
  #   networks:
  #     - dashboard_app_network
  #   environment:
  #     POSTGRES_USER: "postgres"
  #     POSTGRES_PASSWORD: "password"
  #     POSTGRES_DB: "postgres"
  #     DB_HOST: "db"
  #     DB_PORT: "5432"

  backend:
    build: 
      context: ../../apps
      dockerfile: dashboard_app/app.Dockerfile
    restart: always
    volumes:
      - ../../apps:/app
    env_file:
      - ../../apps/dashboard_app/.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 5s
      retries: 5


volumes:
  postgres_data:
